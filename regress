#!/bin/bash

##########################REGRESS SCRIPT##################################################
# Date Creeated: 01/20/2016
# Created by: Humble Masood 
# DESCRIPTION
# Regress is designed to provide regression testing facility to the user so that
# a program can be tested for errors aftera program undergoes modification to
# ensure that the program functionality remains uncompromised

# INTERFACE:
# regress program [ -o options ] [ prefix-file ] [ -p prefix list ]
# note: prefix list is a file that contains names of multiple prefix-files each
# with distinct set of input data

# WARNING: 
# for each prefix-file {a-zA-Z1-9}* that is to be tested, there must exit a set of {a-zA-Z1-9}*.in 
# and {a-zA-Z1-9}*.out file(name of the prefix-file, .in and .out must match completely)

# SAMPLE SCRIPT USAGES


# SIDE EFFECTS
# May create temporary files corresponding to the template 'pfile.XXXX' or 'output.
# 'output.XXXX' where .XXXX can be any of the alphanumeric characters
#################################################################################


# USAGE
# usage "1" generates an error msg for input file missing or nor readable
# usage "2" generates an error msg for program not being executable
# usage "3" generates an error msg for too few command arguments
# usage "4" generates an error msg for output file missing or nor readable

usage() {
        case "${1}" in
          1 ) printf "cannot access input file ${2}\n" 1>&2; ;;
          2 ) printf "program \"$prog\" cannot be run\n" 1>&2; exit 1 ;;
          3 ) printf "Usage: regress program [ -o 'options' ] [ prefix-file ] [ -p prefix-list ]\n" 1>&2; exit 1 ;;
          4 ) printf "cannot access output file ${2}\n" 1>&2 ;;
          esac
}


# VALIDATE_ARGS
# validate_args verifies that the script has been run appropriately: it checks 
# to ensure that the right number of arguments have been used and that the order in which
# arguments are supplied to the script is correct(or not). If the number of arguments or thier
# order is found to be wrong then then the routine prints the appropriate message to standard
# error. If everything is deemed correct then the routine calls the run_test routine with
# appropriate arguments to compare, and print the difference, between generated output and 
# expected output if any		  
validateArgs()
{
	if [ $# -eq 0 ]; then
		usage 3 # too few command line arguments
	fi

	prog="${1}"
	shift

	#read options
	if [ $# -gt 0 -a "${1}" = "-o" ]; then
		args="${2}"
		shift 2
	else
		args=""
	fi

	if [ $# -gt 0 -a "${1}" != "-p" ]; then
		prefixes=$(cat "${1}")
		shift
	else
		prefixes=""
	fi	

	if [ $# -gt 0 -a "${1}" = "-p" ]; then
		shift
		prefixes="$prefixes ${@}"
		shift $#
	elif [ $# -ne 0 ]; then
		usage 3
	fi
	
	if type -p $prog &> /dev/null ; then
		runTest
	else 
		usage 2 		
	fi
}



# RUN_TEST
# runTest takes in a program, a list of filenames, each ontaining input to be tested,
# along with the corresponding expected output(file). It runs the program on each input 
# file, matches the generated output with expected output and prints "identical output
# for prefix X...X", where X...X is replaced with the name of input file and prints the 
# difference between the two outputs otherwise 
runTest()
{
	for prefix in $prefixes; do # process all prefix(input) files
		if [ -f $prefix.in -a -f $prefix.out ]; then # does the .in and .out file with the same name as prefix-file exist in pwd?
			progargs="$args"
			if [ -r "$prefix.args" -a -f "$prefix.args" ]; then # does a readable prefix.args file exits in the pwd?
			progargs=$(cat "$prefix.args")
			fi
			out=$(mktemp tmp.XXXXX) # temporary file for stroing generated output
			${prog} $progargs < "$prefix.in" > "$out" # run program with appropriate args, store the output in "out" file
			if ! diff "$out" "$prefix.out" &> /dev/null; then # is there a difference between generated and expected output?
				diff "$out" "$prefix.out" # print the difference between output files to std::out
			else # both output files identical
				echo "identical output for prefix \"$prefix\"" 
			fi
			rm "$out" # delete temprary output file
		elif [ ! -f $prefix.in ]; then # does prefix.in file not exist in pwd?
			usage 1 $prefix.in # print usage message
		elif [ ! -f $prefix.out ]; then # does prefix.out file not exist in pwd?
			usage 4 $prefix.out # print usage message
		fi
	done
} 

validateArgs "${@}" # begin execution of the script with all the command-line args
